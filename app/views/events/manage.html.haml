%ul.breadcrumb
  %li
    = link_to "Home", :root
    %span.divider= "/"
  %li
    = link_to "Events", events_path
    %span.divider= "/"
  %li.active
    = @event.name
    Management


%h1= @event.name

- if @event.tiers.empty?
  %h2 This event has no tiers. Please create one.
- else

  %h3 Tiers
  %table.table.table-condensed.table-bordered.table-hover
    %tr
      %th Name
      %th Position
      %th Ruleset
      %th Tier Settings
      %th Delete Tier

    - @event.tiers.ranked.each do |tier|
      %tr
        %td
          = tier.name
        %td
          = tier.tier_hierarchy_position
        %td
          - if !tier.ruleset?
            Edit Override Ruleset
          - else
            = link_to "Edit Override Ruleset", edit_tier_ruleset_path(tier.ruleset)
        %td
          = link_to "Edit", edit_tier_path(tier)
        %td
          = link_to "Delete", event_tier_path(@event, tier), :method => :delete

%h4 Create Tiers
= form_for [@event, @tier], :html => {:class => "form-horizontal"} do |f|
  - if @tier.errors.any?
    .error_messages
      %h2
        = pluralize(@tier.errors.count, "error")
        prohibited this tier from being saved:
      %ul
        - @tier.errors.full_messages.each do |msg|
          %li= msg

  .row-fluid
    .span6
      .control-group
        %label.control-label
          Name
        .controls
          = f.text_field :name
        %label.control-label
          Tier Hierarchy Position
        .controls
          = f.number_field :tier_hierarchy_position

      .control-group
        %label.control-label
          Max Games per Player
        .controls
          = f.text_field :max_games_per_player
        %label.control-label
          Max Games per Opponent
        .controls
          = f.number_field :max_games_per_opponent

    .span6
      .control-group
        %label.control-label
          Number of Promotions
        .controls
          = f.number_field :promotions
        %label.control-label
          Number of Demotions
        .controls
          = f.number_field :demotions

      .control-group
        %label.control-label
          Points per Win
        .controls
          = f.number_field :points_per_win, :step => "any"
        %label.control-label
          Points per Loss
        .controls
          = f.number_field :points_per_loss, :step => "any"


  .accordion#accordion1
    .accordion-group
      .accordion-heading
        %a.accordion-toggle{:data => {:toggle => "collapse", :parent => "#accordion1"}, :href => "#collapseOne"}
          Create Override Ruleset (Optional)
      .accordion-body.collapse#collapseOne
        .accordion-inner
          = f.fields_for(@tier.build_tier_ruleset) do |b|

            = render "ruleset_fields", :b => b

  = f.submit :submit


%h3 Divisions by Tier
- @event.tiers.ranked.each do |tier|
  %table.table.table-condensed.table-bordered
    %tr
      %th
        Tier
        = tier.name
        Divisions
      %th
        Edit
      %th
        Delete
    - if tier.divisions.empty?
      %tr
        %td{:colspan => 3}
          This tier has no divisions. Please create them.
    - else
      - tier.divisions.each do |division|
        %tr
          %td
            = tier.name + " " + division.division_index.to_s
          %td
            = link_to "Edit", edit_division_path(division)
          %td
            = link_to "Delete", division_path(division), :method => :delete
    %tr
      %td{:colspan => 3}
        %h4 Create Division
        = form_for [tier, @division], :html => {:class => "form-horizontal"} do |f|

          = render "division_fields", :f => f

          .accordion{:id => "accordion#{tier.id}"}
            .accordion-group
              .accordion-heading
                %a.accordion-toggle{:data => {:toggle => "collapse", :parent => "#accordion#{tier.id}"}, :href => "#collapse#{tier.id}"}
                  Create Override Ruleset (Optional)
              .accordion-body.collapse{:id => "collapse#{tier.id}"}
                .accordion-inner
                  = f.fields_for(@division.build_division_ruleset) do |b|

                    = render "ruleset_fields", :b => b
          = f.submit :submit


